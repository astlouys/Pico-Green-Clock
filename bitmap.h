/* ======================================================================== *\
   bitmap.h
   St-Louys Andre - February 2022
   astlouys@gmail.com
   Revision 05-MAY-2023
   Langage: Linux gcc
   Version 10.00

   Raspberry Pi Pico firmware to drive the Waveshare green clock
   From an original software version by "Yufu" on 23-JAN-2021 and
   given with the Waveshare green clock by 2020 Raspberry Pi (Trading) Ltd.

   REVISION HISTORY:
   =================
   07-FEB-2022  1.00 - Initial release
   20-FEB-2022  2.00 - Implement 5 X 7 character map with variable character width.
   08-SEP-2022  6.00 - Improve the symbol for "degree" for both Celsius and Fahrenheit.
   05-MAY-2023 10.00 - Add character bitmaps for Czech language.
\* ======================================================================== */



/* ======================================================================== *\
   NOTE:
\* ======================================================================== */



/* $TITLE=Definitions and include files. */
/* $PAGE */
/* ----------------------------------------------------------------- *\
                    Definitions and include files.
\* ----------------------------------------------------------------- */
#ifndef _BITMAP_H
#define _BITMAP_H



typedef unsigned char UCHAR;



/* $TITLE=Original characters bitmap. */
/* $PAGE */
/* ----------------------------------------------------------------- *\
                   Original 4 X 7 characters bitmap.
\* ----------------------------------------------------------------- */
/* Character map (bit pattern to turn ON for each specific digit) for
   the 4 X 7 family of characters.
   Since the least significant bit is on the left side of the clock display,
   the bitmap is in the reverse order of what we would intuitively expect. */
const UCHAR CharacterMap[]=
{
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,       // (00)  ASCII 0x2D  - (2×7)
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,       // (01)  ASCII 0x2E  . (1×7)
  0x04, 0x04, 0x02, 0x02, 0x02, 0x01, 0x01,       // (02)  ASCII 0x2F  slash (3×7)
  0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x06,       // (03)  ASCII 0x30  0
  0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x0E,       // (04)  ASCII 0x31  1
  0x06, 0x09, 0x08, 0x04, 0x02, 0x01, 0x0F,       // (05)  ASCII 0x32  2
  0x06, 0x09, 0x08, 0x06, 0x08, 0x09, 0x06,       // (06)  ASCII 0x33  3
  0x08, 0x0C, 0x0A, 0x09, 0x0F, 0x08, 0x08,       // (07)  ASCII 0x34  4
  0x0F, 0x01, 0x07, 0x08, 0x08, 0x09, 0x06,       // (08)  ASCII 0x35  5
  0x04, 0x02, 0x01, 0x07, 0x09, 0x09, 0x06,       // (09)  ASCII 0x36  6
  0x0F, 0x08, 0x08, 0x04, 0x02, 0x02, 0x02,       // (10)  ASCII 0x37  7
  0x06, 0x09, 0x09, 0x06, 0x09, 0x09, 0x06,       // (11)  ASCII 0x38  8
  0x06, 0x09, 0x09, 0x0E, 0x08, 0x04, 0x02,       // (12)  ASCII 0x39  9
  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,       // (13)  ASCII 0x3A  : (slim version)
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,       // (14)  ASCII 0x3B  : (slim version - top dot only)
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,       // (15)  ASCII 0x3C  : (slim version - bottom dot only)
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,       // (16)  ASCII 0x3D    (vertical bar)
  0x06, 0x09, 0x09, 0x04, 0x04, 0x00, 0x04,       // (17)  ASCII 0x3E    (placeholder "?" for now)
  0x06, 0x09, 0x09, 0x04, 0x04, 0x00, 0x04,       // (18)  ASCII 0x3E    (placeholder "?" for now)
  0x06, 0x09, 0x09, 0x04, 0x04, 0x00, 0x04,       // (19)  ASCII 0x3E    (placeholder "?" for now)
  0x06, 0x09, 0x09, 0x0F, 0x09, 0x09, 0x09,       // (20)  ASCII 0x41  A
  0x07, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07,       // (21)  ASCII 0x42  B
  0x06, 0x09, 0x01, 0x01, 0x01, 0x09, 0x06,       // (22)  ASCII 0x43  C
  0x07, 0x09, 0x09, 0x09, 0x09, 0x09, 0x07,       // (23)  ASCII 0x44  D
  0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x0F,       // (24)  ASCII 0x45  E
  0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01,       // (25)  ASCII 0x46  F
  0x06, 0x09, 0x01, 0x01, 0x0D, 0x09, 0x06,       // (26)  ASCII 0x47  G
  0x09, 0x09, 0x09, 0x0F, 0x09, 0x09, 0x09,       // (27)  ASCII 0x48  H
  0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x07,       // (28)  ASCII 0x49  I
  0x0E, 0x04, 0x04, 0x04, 0x04, 0x05, 0x06,       // (29)  ASCII 0x4A  J
  0x09, 0x09, 0x05, 0x03, 0x05, 0x09, 0x09,       // (30)  ASCII 0x4B  K
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F,       // (31)  ASCII 0x4C  L
  0x09, 0x0F, 0x0F, 0x09, 0x09, 0x09, 0x09,       // (32)  ASCII 0x4D  M
  0x09, 0x09, 0x0B, 0x0D, 0x09, 0x09, 0x09,       // (33)  ASCII 0x4E  N
  0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x06,       // (34)  ASCII 0x4F  O
  0x07, 0x09, 0x09, 0x07, 0x01, 0x01, 0x01,       // (35)  ASCII 0x50  P
  0x06, 0x09, 0x09, 0x09, 0x09, 0x05, 0x0A,       // (36)  ASCII 0x51  Q
  0x07, 0x09, 0x09, 0x07, 0x09, 0x09, 0x09,       // (37)  ASCII 0x52  R
  0x06, 0x09, 0x01, 0x06, 0x08, 0x09, 0x06,       // (38)  ASCII 0x53  S
  0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,       // (39)  ASCII 0x54  T
  0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x06,       // (40)  ASCII 0x55  U
  0x11, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x04,       // (41)  ASCII 0x56  V
  0x09, 0x09, 0x09, 0x09, 0x0F, 0x0F, 0x09,       // (42)  ASCII 0x57  W
  0x09, 0x09, 0x06, 0x06, 0x06, 0x09, 0x09,       // (43)  ASCII 0x58  X
  0x09, 0x09, 0x09, 0x09, 0x06, 0x06, 0x06,       // (44)  ASCII 0x59  Y
  0x0F, 0x08, 0x04, 0x04, 0x02, 0x01, 0x0F,       // (45)  ASCII 0x5A  Z
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       // (46)  ASCII 0x20  Blank
  0x00, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00,       // (47)  ASCII 0x3A  : (2×7) wide version
  0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,       // (48)  ASCII 0x54  T (5*7)
  0x06, 0x09, 0x09, 0x04, 0x04, 0x00, 0x04,       // (49)  ASCII 0x3F  ? (4×7)
  0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11,       // (50)  ASCII 0x4D  M (5×7)
  0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04,       // (51)  ASCII 0x56  V (5×7)
  0x01, 0x0C, 0x12, 0x02, 0x02, 0x12, 0x0C,       // (52)  ASCII ----  Degree c (5×7)
  0x01, 0x1E, 0x02, 0x1E, 0x02, 0x02, 0x02,       // (53)  ASCII ----  Degree f (5×7)
  0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11,       // (54)  ASCII       W (5×7)
  0x0F, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0F,       // (55)  0 (7-segment type)
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,       // (56)  1 (7-segment type)
  0x0F, 0x08, 0x08, 0x0F, 0x01, 0x01, 0x0F,       // (57)  2 (7-segment type)
  0x0F, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x0F,       // (58)  3 (7-segment type)
  0x09, 0x09, 0x09, 0x0F, 0x08, 0x08, 0x08,       // (59)  4 (7-segment type)
  0x0F, 0x01, 0x01, 0x0F, 0x08, 0x08, 0x0F,       // (60)  5 (7-segment type)
  0x0F, 0x01, 0x01, 0x0F, 0x09, 0x09, 0x0F,       // (61)  6 (7-segment type)
  0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,       // (62)  7 (7-segment type)
  0x0F, 0x09, 0x09, 0x0F, 0x09, 0x09, 0x0F,       // (63)  8 (7-segment type)
  0x0F, 0x09, 0x09, 0x0F, 0x08, 0x08, 0x0F,       // (64)  9 (7-segment type)
  0x0F, 0x09, 0x09, 0x0F, 0x09, 0x09, 0x09,       // (65)  A (7-segment type)
  0x01, 0x01, 0x01, 0x0F, 0x09, 0x09, 0x0F,       // (66)  B (7-segment type)
  0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F,       // (67)  C (7-segment type)
  0x08, 0x08, 0x08, 0x0F, 0x09, 0x09, 0x0F,       // (68)  D (7-segment type)
  0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x0F,       // (69)  E (7-segment type)
  0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01,       // (70)  F (7-segment type)
  0x09, 0x09, 0x09, 0x0F, 0x09, 0x09, 0x09,       // (71)  H (7-segment type)
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F,       // (72)  L (7-segment type)
  0x0F, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,       // (73)  N (7-segment type)
  0x0F, 0x09, 0x09, 0x0F, 0x01, 0x01, 0x01,       // (74)  P (7-segment type)
  0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0F,       // (75)  U (7-segment type)
  0x00, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00,       // (76)  : (2×7) fat version
  0x01, 0x1E, 0x02, 0x02, 0x02, 0x02, 0x1E,       // (77)  Celcius symbol
  0x01, 0x1E, 0x02, 0x1E, 0x02, 0x02, 0x02,       // (78)  Fahrenheit symbol
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       // (79)  Space
  0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,       // (80) T (5*7)
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,       // (81) . (2×7)
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,       // (82) - (2×7)
  0x00, 0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11, // (83) M (5×7)
};




/* $TITLE=Variable width 5 X 7 character bitmap. */
/* $PAGE */
/* ----------------------------------------------------------------- *\
               Variable width 5 X 7 character bitmap.
\* ----------------------------------------------------------------- */
/* Character map (bit pattern to turn ON for each specific digit) for
   the 5 X 7 family of characters.
   A "reverse_bit()" function has been implemented in the code, so that
   the bit order in which we find the bitmap below is compliant to what
   we would intuitively expect, as opposed to the case for the 4 X 7
   family of characters. The power of the processor to drive a real-
   time clock makes this optimization useless during the design. */
UCHAR CharMap[]=
{
  0x0E, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D,  // 000   0x1E  u - circumflex
  0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,  // 001   0x1F  e - acute
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 002   0x20  "space"
  0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10,  // 003   0x21  !
  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,  // 004   0x22  "
  0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A,  // 005   0x23  #
  0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04,  // 006   0x24  $
  0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03,  // 007   0x25  %
  0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D,  // 008   0x26  &
  0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,  // 009   0x27  '
  0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04,  // 010   0x28  (
  0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10,  // 011   0x29  )
  0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00,  // 012   0x2A  *
  0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00,  // 013   0x2B  +
  0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x10,  // 014   0x2C  ,
  0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // 015   0x2D  -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,  // 016   0x2E  .
  0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00,  // 017   0x2F  /
  0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E,  // 018   0x30  0
  0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1C,  // 019   0x31  1
  0x0E, 0x11, 0x01, 0x06, 0x08, 0x10, 0x1F,  // 020   0x32  2
  0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E,  // 021   0x33  3
  0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02,  // 022   0x34  4
  0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E,  // 023   0x35  5
  0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E,  // 024   0x36  6
  0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08,  // 025   0x37  7
  0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E,  // 026   0x38  8
  0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C,  // 027   0x39  9
  0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00,  // 028   0x3A  :
  0x00, 0x18, 0x18, 0x00, 0x18, 0x08, 0x10,  // 029   0x3B  ;
  0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02,  // 030   0x3C  <
  0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00,  // 031   0x3D  =
  0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10,  // 032   0x3E  >
  0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04,  // 033   0x3F  ?
  0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E,  // 034   0x40  @
  0x04, 0x0E, 0x11, 0x11, 0x1F, 0x11, 0x11,  // 035   0x41  A
  0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E,  // 036   0x42  B
  0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E,  // 037   0x43  C
  0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E,  // 038   0x44  D
  0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x1F,  // 039   0x45  E
  0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x10,  // 040   0x46  F
  0x0E, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0E,  // 041   0x47  G
  0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11,  // 042   0x48  H
  0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C,  // 043   0x49  I
  0x0F, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C,  // 044   0x4A  J
  0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11,  // 045   0x4B  K
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1E,  // 046   0x4C  L
  0x11, 0x1B, 0x1B, 0x15, 0x15, 0x11, 0x11,  // 047   0x4D  M
  0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11,  // 048   0x4E  N
  0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E,  // 049   0x4F  O
  0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10,  // 050   0x50  P
  0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D,  // 051   0x51  Q
  0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11,  // 052   0x52  R
  0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E,  // 053   0x53  S
  0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,  // 054   0x54  T
  0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E,  // 055   0x55  U
  0x11, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x04,  // 056   0x56  V
  0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11,  // 057   0x57  W
  0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11,  // 058   0x58  X
  0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04,  // 059   0x59  Y
  0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F,  // 060   0x5A  Z
  0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C,  // 061   0x5B  [
  0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00,  // 062   0x5C  back-slash
  0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C,  // 063   0x5D  ]
  0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00,  // 064   0x5E  ^
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,  // 065   0x5F  _
  0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00,  // 066   0x60  '
  0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,  // 067   0x61  a
  0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x0E,  // 068   0x62  b
  0x00, 0x00, 0x0E, 0x10, 0x10, 0x10, 0x0E,  // 069   0x63  c
  0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0E,  // 070   0x64  d
  0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E,  // 071   0x65  e
  0x06, 0x09, 0x08, 0x1C, 0x08, 0x08, 0x08,  // 072   0x66  f
  0x00, 0x00, 0x0F, 0x11, 0x0F, 0x01, 0x0E,  // 073   0x67  g
  0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11,  // 074   0x68  h
  0x08, 0x00, 0x08, 0x18, 0x08, 0x08, 0x1C,  // 075   0x69  i
  0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C,  // 076   0x6A  j
  0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12,  // 077   0x6B  k
  0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C,  // 078   0x6C  l
  0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15,  // 079   0x6D  m
  0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11,  // 080   0x6E  n
  0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,  // 081   0x6F  o
  0x00, 0x00, 0x1E, 0x11, 0x1E, 0x10, 0x10,  // 082   0x70  p
  0x00, 0x00, 0x0D, 0x13, 0x0F, 0x01, 0x01,  // 083   0x71  q
  0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10,  // 084   0x72  r
  0x00, 0x00, 0x0E, 0x10, 0x0E, 0x01, 0x1E,  // 085   0x73  s
  0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06,  // 086   0x74  t
  0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D,  // 087   0x75  u
  0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04,  // 088   0x76  v
  0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A,  // 089   0x77  w
  0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11,  // 090   0x78  x
  0x00, 0x00, 0x11, 0x11, 0x0F, 0x01, 0x0E,  // 091   0x79  y
  0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F,  // 092   0x7A  z
  0x04, 0x08, 0x08, 0x10, 0x08, 0x08, 0x04,  // 093   0x7B  {
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  // 094   0x7C  |
  0x10, 0x08, 0x08, 0x04, 0x08, 0x08, 0x10,  // 095   0x7D  }
  0x14, 0x0A, 0x05, 0x00, 0x00, 0x00, 0x00,  // 096   0x7E  open double quote
  0x05, 0x0A, 0x14, 0x00, 0x00, 0x00, 0x00,  // 097   0x7F  close double quote
  0x04, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  // 098   0x80  symbol for degree
  0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,  // 099   0x81  a - acute
  0x0A, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,  // 100   0x82  e - caron (130)
  0x04, 0x08, 0x00, 0x18, 0x08, 0x08, 0x1C,  // 101   0x83  i - acute (131)
  0x02, 0x04, 0x11, 0x11, 0x0F, 0x01, 0x0E,  // 102   0x84  y - acute (132)
  0x02, 0x04, 0x11, 0x11, 0x11, 0x13, 0x0D,  // 103   0x85  u - acute (133)
  0x00, 0x04, 0x11, 0x11, 0x11, 0x13, 0x0D,  // 104   0x86  u - ring  (134)
  0x0A, 0x04, 0x16, 0x19, 0x10, 0x10, 0x10,  // 105   0x87  r - caron (135)
  0x0A, 0x04, 0x0E, 0x10, 0x10, 0x10, 0x0E,  // 106   0x88  c - caron (136)
  0x0A, 0x04, 0x1F, 0x02, 0x04, 0x08, 0x1F,  // 107   0x89  z - caron (137)
  0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,  // 108   0x90  e - acute (138)
  0x02, 0x04, 0x0E, 0x11, 0x11, 0x11, 0x0E,  // 109   0x91  o - acute (139)
  0x0A, 0x14, 0x16, 0x19, 0x11, 0x11, 0x11,  // 110   0x92  n - tilde (140)
};



/* $TITLE=Variable width 5 X 7 characters. */
/* $PAGE */
/* ----------------------------------------------------------------- *\
                   Variable width 5 X 7 characters.
           Allows characters that are thinner than 5 dots
                      to be displayed as such.
\* ----------------------------------------------------------------- */
/* The 5 X 7 family of characters has been implemented with a variable
   width. The widh for each character is found below. */
UCHAR CharWidth[]=
{
  5,  // 000
  5,  // 001
  2,  // 002
  1,  // 003
  2,  // 004
  5,  // 005
  5,  // 006
  5,  // 007
  5,  // 008
  3,  // 009
  3,  // 010
  3,  // 011
  5,  // 012
  5,  // 013
  2,  // 014
  5,  // 015
  2,  // 016
  5,  // 017
  5,  // 018
  3,  // 019
  5,  // 020
  5,  // 021
  5,  // 022
  5,  // 023
  5,  // 024
  5,  // 025
  5,  // 026
  5,  // 027
  1,  // 028
  2,  // 029
  4,  // 030
  5,  // 031
  4,  // 032
  5,  // 033
  5,  // 034
  5,  // 035
  5,  // 036
  5,  // 037
  5,  // 038
  5,  // 039
  5,  // 040
  5,  // 041
  5,  // 042
  3,  // 043
  5,  // 044
  5,  // 045
  4,  // 046
  5,  // 047
  5,  // 048
  5,  // 049
  5,  // 050
  5,  // 051
  5,  // 052
  5,  // 053
  5,  // 054
  5,  // 055
  5,  // 056
  5,  // 057
  5,  // 058
  5,  // 059
  5,  // 060
  3,  // 061
  5,  // 062
  3,  // 063
  5,  // 064
  5,  // 065
  3,  // 066
  5,  // 067
  5,  // 068
  4,  // 069
  5,  // 070
  5,  // 071
  5,  // 072
  5,  // 073
  5,  // 074
  3,  // 075
  4,  // 076
  4,  // 077
  3,  // 078
  5,  // 079
  5,  // 080
  5,  // 081
  5,  // 082
  5,  // 083
  5,  // 084
  5,  // 085
  5,  // 086
  5,  // 087
  5,  // 088
  5,  // 089
  5,  // 090
  5,  // 091
  5,  // 092
  3,  // 093
  1,  // 094
  3,  // 095
  5,  // 096
  5,  // 097
  4,  // 098
  5,  // 099   a - acute
  5,  // 100   e - caron
  3,  // 101   i - acute
  5,  // 102   y - acute
  5,  // 103   u - acute
  5,  // 104   u - ring
  5,  // 105   r - caron
  4,  // 106   c - caron
  5,  // 107   z - caron
  5,  // 108   e - acute
  5,  // 109   o - acute
  5,  // 110   n - tilde
};

#endif
